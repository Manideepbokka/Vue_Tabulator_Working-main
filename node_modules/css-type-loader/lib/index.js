"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const cssTypeHelper_1 = require("./cssTypeHelper");
const bannerMessage = `// This file is automatically generated.\n\n`;
const makeDoneHandlers = (callback, content, rest) => ({
    failed: e => callback(e),
    success: () => callback(null, content, ...rest)
});
const makeFileHandlers = (filename) => ({
    read: handler => fs.readFile(filename, { encoding: 'utf-8' }, handler),
    write: (content, handler) => fs.writeFile(filename, content, { encoding: 'utf-8' }, handler)
});
function default_1(content, ...rest) {
    // get css module keys
    const cssKeys = cssTypeHelper_1.getCssModuleKeys(content);
    const fields = cssKeys.map((key) => `  '${key}': string;`);
    const cssInterface = `interface CssExports {\n${fields.join('\n')}\n}`;
    const cssModuleExport = '\n\ndeclare var cssExports: CssExports;\nexport = cssExports;\n';
    const cssModuleDefinition = bannerMessage + cssInterface + cssModuleExport;
    // get css module interface filename
    const cssModuleTypeFilename = cssTypeHelper_1.getTypingFilename(this.resourcePath);
    // async handlers
    const { read, write } = makeFileHandlers(cssModuleTypeFilename);
    const { failed, success } = makeDoneHandlers(this.async(), content, rest);
    read((_, fileContents) => {
        if (cssModuleDefinition !== fileContents) {
            write(cssModuleDefinition, err => {
                if (err) {
                    failed(err);
                }
                else {
                    success();
                }
            });
        }
        else {
            success();
        }
    });
}
exports.default = default_1;
;
